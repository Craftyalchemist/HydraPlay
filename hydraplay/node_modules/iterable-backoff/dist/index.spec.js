'use strict';

var _ = require('./');

// ===================================================================

const testIterable = (iterable, values) => {
  let iterator;
  if (iterable == null || typeof iterable[_.symbolIterator] !== 'function' || typeof (iterator = iterable[_.symbolIterator]()).next !== 'function') {
    throw new TypeError('is not iterable');
  }

  for (var _iterator = values, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
    var _ref;

    if (_isArray) {
      if (_i >= _iterator.length) break;
      _ref = _iterator[_i++];
    } else {
      _i = _iterator.next();
      if (_i.done) break;
      _ref = _i.value;
    }

    const value = _ref;

    const cursor = iterator.next();
    if (cursor.done) {
      throw new Error('unexpected end of iterable');
    }
    expect(cursor.value).toBe(value);
  }
};

// ===================================================================

/* eslint-env jest */

describe('exponential()', () => {
  it('returns an iterable', () => {
    testIterable((0, _.exponential)(), [2, 4, 8, 16, 32, 64, 128, 256, 512, 1024]);
  });
});

describe('fibonacci()', () => {
  it('returns an iterable', () => {
    testIterable((0, _.fibonacci)(), [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]);
  });
});

describe('power()', () => {
  it('returns an iterable', () => {
    testIterable((0, _.power)(), [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);
  });
});
//# sourceMappingURL=index.spec.js.map