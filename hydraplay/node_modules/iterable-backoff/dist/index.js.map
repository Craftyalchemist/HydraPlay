{"version":3,"sources":["../src/index.js"],"names":["symbolIterator","Symbol","iterator","DONE","done","Iterator","constructor","next","addNoise","factor","map","value","Math","random","clamp","min","max","fn","cursor","take","n","i","toMs","x","floor","exponential","base","curr","fibonacci","power"],"mappings":";;;AAEO,MAAMA,0CAAkB,OAAOC,MAAP,KAAkB,WAAlB,IAAiCA,OAAOC,QAAzC,IAAsD,YAA7E;;AAOP,MAAMC,OAAe,EAAEC,MAAM,IAAR,EAArB;;AAEA,MAAMC,QAAN,CAAe;;AAGbC,cAAaC,IAAb,EAAyB;AACvB,SAAKA,IAAL,GAAYA,IAAZ;AACD;;AAED;AACA,GAACP,cAAD,IAAoB;AAClB,WAAO,IAAP;AACD;;AAED;AACAQ,WAAUC,SAAiB,GAA3B,EAAgC;AAC9B,WAAO,KAAKC,GAAL,CAASC,SACdA,SAAS,IAAI,CAACC,KAAKC,MAAL,KAAgB,GAAjB,IAAwBJ,MAArC,CADK,CAAP;AAGD;;AAEDK,QAAOC,GAAP,EAAoBC,GAApB,EAAiC;AAC/B,WAAO,KAAKN,GAAL,CAASC,SACdA,QAAQI,GAAR,GAAcA,GAAd,GAAoBJ,QAAQK,GAAR,GAAcA,GAAd,GAAoBL,KADnC,CAAP;AAGD;;AAEDD,MAAKO,EAAL,EAA2B;AACzB,WAAO,IAAIZ,QAAJ,CAAa,MAAM;AACxB,YAAMa,SAAS,KAAKX,IAAL,EAAf;AACA,UAAIW,OAAOd,IAAX,EAAiB;AACf,eAAOc,MAAP;AACD;AACD,aAAO;AACLd,cAAM,KADD;AAELO,eAAOM,GAAGC,OAAOP,KAAV;AAFF,OAAP;AAID,KATM,CAAP;AAUD;;AAEDQ,OAAMC,CAAN,EAAiB;AACf,QAAIC,IAAI,CAAR;AACA,WAAO,IAAIhB,QAAJ,CAAa,MAAM;AACxB,UAAIgB,IAAID,CAAR,EAAW;AACT,UAAEC,CAAF;AACA,eAAO,KAAKd,IAAL,EAAP;AACD;AACD,aAAOJ,IAAP;AACD,KANM,CAAP;AAOD;;AAED;AACAmB,SAAQ;AACN,WAAO,KAAKZ,GAAL,CAASa,KAAKX,KAAKY,KAAL,CAAWD,IAAI,GAAf,CAAd,CAAP;AACD;AApDY;;AAuDR,MAAME,oCAAc,CAACC,OAAe,CAAhB,KAAsB;AAC/C,MAAIC,OAAOD,IAAX;;AAEA,SAAO,IAAIrB,QAAJ,CAAa,MAAM;AACxB,UAAMM,QAAQgB,IAAd;AACAA,YAAQD,IAAR;AACA,WAAO;AACLtB,YAAM,KADD;AAELO;AAFK,KAAP;AAID,GAPM,CAAP;AAQD,CAXM;;AAaA,MAAMiB,gCAAY,MAAM;AAC7B,MAAID,OAAO,CAAX;AACA,MAAIpB,OAAO,CAAX;;AAEA,SAAO,IAAIF,QAAJ,CAAa,MAAM;AACxB,UAAMM,QAAQgB,IAAd;AACAA,WAAOpB,IAAP;AACAA,YAAQI,KAAR;;AAEA,WAAO;AACLP,YAAM,KADD;AAELO;AAFK,KAAP;AAID,GATM,CAAP;AAUD,CAdM;;AAgBA,MAAMkB,wBAAQ,CAACA,QAAgB,CAAjB,KAAuB;AAC1C,MAAIR,IAAI,CAAR;;AAEA,SAAO,IAAIhB,QAAJ,CAAa,MAAM;AACxB,WAAO;AACLD,YAAM,KADD;AAELO,sBAAOU,GAAP,EAAcQ,KAAd;AAFK,KAAP;AAID,GALM,CAAP;AAMD,CATM","file":"index.js","sourcesContent":["// @flow\n\nexport const symbolIterator = (typeof Symbol !== 'undefined' && Symbol.iterator) || '@@iterator'\n\ntype Result =\n  {| done: false, value: number |} |\n  {| done: true |}\ntype Next = () => Result\n\nconst DONE: Result = { done: true }\n\nclass Iterator {\n  next: Next\n\n  constructor (next: Next) {\n    this.next = next\n  }\n\n  // $FlowFixMe https://github.com/facebook/flow/issues/2286\n  [symbolIterator] () {\n    return this\n  }\n\n  // add a percentage of noise\n  addNoise (factor: number = 0.1) {\n    return this.map(value =>\n      value * (1 + (Math.random() - 0.5) * factor)\n    )\n  }\n\n  clamp (min: number, max: number) {\n    return this.map(value =>\n      value < min ? min : value > max ? max : value\n    )\n  }\n\n  map (fn: number => number) {\n    return new Iterator(() => {\n      const cursor = this.next()\n      if (cursor.done) {\n        return cursor\n      }\n      return {\n        done: false,\n        value: fn(cursor.value)\n      }\n    })\n  }\n\n  take (n: number) {\n    let i = 0\n    return new Iterator(() => {\n      if (i < n) {\n        ++i\n        return this.next()\n      }\n      return DONE\n    })\n  }\n\n  // converts to miliseconds (ie * 1e3)\n  toMs () {\n    return this.map(x => Math.floor(x * 1e3))\n  }\n}\n\nexport const exponential = (base: number = 2) => {\n  let curr = base\n\n  return new Iterator(() => {\n    const value = curr\n    curr *= base\n    return {\n      done: false,\n      value\n    }\n  })\n}\n\nexport const fibonacci = () => {\n  let curr = 1\n  let next = 1\n\n  return new Iterator(() => {\n    const value = curr\n    curr = next\n    next += value\n\n    return {\n      done: false,\n      value\n    }\n  })\n}\n\nexport const power = (power: number = 2) => {\n  let i = 1\n\n  return new Iterator(() => {\n    return {\n      done: false,\n      value: i++ ** power\n    }\n  })\n}\n"]}